CREATE PROCEDURE insert_update_data AS
BEGIN
  BEGIN TRY
    MERGE final_table AS target
    USING #temp AS source
    ON (target.col1 = source.col1 AND target.col2 = source.col2) -- Remplacez "col1" et "col2" par les noms de vos colonnes
    WHEN MATCHED THEN
      UPDATE SET target.col3 = source.col3, target.col4 = source.col4 -- Remplacez "col3" et "col4" par les noms de vos colonnes
    WHEN NOT MATCHED THEN
      INSERT (col1, col2, col3, col4) -- Remplacez "col1", "col2", "col3" et "col4" par les noms de vos colonnes
      VALUES (source.col1, source.col2, source.col3, source.col4); -- Remplacez "col1", "col2", "col3" et "col4" par les noms de vos colonnes
  END TRY
  BEGIN CATCH
    INSERT INTO error_log (error_message, error_severity, error_state)
    VALUES (ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE());
  END CATCH;
END;



function ibanValide(iban) {
  iban = iban.replace(/\s/g, ''); // Supprimer les espaces éventuels dans le code IBAN
  if (iban.length != 28) {
    return false; // Un code IBAN doit comporter 28 caractères
  }
  if (/^[A-Z]{2}\d{2}[A-Za-z0-9]{20}$/.test(iban)) {
    let pays = iban.substr(0, 2).toUpperCase();
    let iban_num = iban.substr(4) + iban.substr(0, 4);
    iban_num = iban_num.split('').map(function(c) {
      return (isNaN(c) ? (c.charCodeAt(0) - 55).toString() : c);
    }).join('');
    return parseInt(iban_num) % 97 == 1;
  } else {
    return false;
  }
define(['knockout', 'kendo'], function(ko, kendo) {
    function EmployeesViewModel() {
        var self = this;
        
        self.employees = ko.observableArray([
            { id: 1, name: "Alice", age: 30, salary: 50000 },
            { id: 2, name: "Bob", age: 40, salary: 60000 },
            { id: 3, name: "Charlie", age: 25, salary: 45000 },
            { id: 4, name: "Dave", age: 35, salary: 55000 }
        ]);
        
        self.dataSource = new kendo.data.DataSource({
            data: self.employees(),
            schema: {
                model: {
                    id: "id",
                    fields: {
                        id: { type: "number" },
                        name: { type: "string" },
                        age: { type: "number" },
                        salary: { type: "number" }
                    }
                }
            }
        });
        
        self.gridOptions = {
            dataSource: self.dataSource,
            columns: [
                { field: "name", title: "Nom" },
                { field: "age", title: "Âge" },
                { field: "salary", title: "Salaire" }
            ],
            editable: "inline",
            pageable: true,
            sortable: true,
            filterable: true
        };
    }
    
    return EmployeesViewModel;
});




value: name" />
      <div data-bind="kendoDropDownList: { data: $root.availableColors, value: color, valueField: 'value', textField: 'text', template: $root.colorTemplate }"></div>
      <button data-bind="visible: $index() !== 0, click: $root.moveUp"><i class="fas fa-arrow-up"></i></button>
      <button data-bind="visible: $index() !== $root.fruits().length - 1, click: $root.moveDown"><i class="fas fa-arrow-down"></i></button>
      <button data-bind="click: $root.removeFruit"><i class="fas fa-trash"></i></button>
    </div>
  </li>
</ul>
<button data-bind="click: addFruit">Ajouter un fruit</button>
JavaScript :

javascript
Copy code
function Fruit(id, name, color) {
  var self = this;
  
  self.id = ko.observable(id);
  self.name = ko.observable(name);
  self.color = ko.observable(color);
}

function FruitViewModel() {
  var self = this;
  
  self.fruits = ko.observableArray([
    new Fruit(1, 'Pomme', 'Rouge'),
    new Fruit(2, 'Banane', 'Jaune'),
    new Fruit(3, 'Orange', 'Orange')
  ]);
  
  self.availableColors = [
    { value: 'Rouge', text: 'Rouge' },
    { value: 'Vert', text: 'Vert' },
    { value: 'Bleu', text: 'Bleu' },
    { value: 'Jaune', text: 'Jaune' }
  ];
  
  self.colorTemplate = function(dataItem) {
    return '<div style="background-color: ' + dataItem.value + '; width: 100%; height: 20px;"></div>';
  };
  
  self.addFruit = function() {
    var newFruit = new Fruit(0, '', '');
    self.fruits.push(newFruit);
  };
  
  self.removeFruit = function(fruit) {
    self.fruits.remove(fruit);
  };
  
  self.moveUp = function(fruit) {
    var currentIndex = self.fruits.indexOf(fruit);
    if (currentIndex > 0) {
      var previousIndex = currentIndex - 1;
      self.fruits.splice(previousIndex, 2, fruit, self.fruits()[previousIndex]);
    }
  };
  
  self.moveDown = function(fruit) {
    var currentIndex = self.fruits.indexOf(fruit);
    if (currentIndex < self.fruits().length - 1) {
      var nextIndex = currentIndex + 1;
      self.fruits.splice(currentIndex, 2, self.fruits()[nextIndex], fruit);
    }
  };
}

ko.applyBindings(new FruitViewModel());

"signersList": {
          "signers": "signataires*",
          "fullName": "Nom complet*",
          "login": "login*",
          "email": "email*",
          "phone": "téléphone*",
          "moveup": "monté",
          "movedown": "desendre",
          "deletesigner": "supprimer signataire",
          "deletePopup": {
            "titleDeleteSigner": "confirmation suppression signataire",
            "textDeleteSigner": "vous confirmer vouloir supprimer ce signataire",
            "validateDeleteSigner": "valider",
            "cancelDeleteSigner": "annuler"
          },
          "notificationSuccessDeleteTitle": "suppresison avec success",
          "notificationSucessDeleteText": "La suppression du signataire a été effectuer avec success",
          "notificationErrorDeleteTitle": "erreur lors de la suppression",
          "notificationErrorDeleteText": "une erreur est survenu lors de la suppression "
        }
