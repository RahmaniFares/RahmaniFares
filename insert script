CREATE PROCEDURE insert_update_data AS
BEGIN
  BEGIN TRY
    MERGE final_table AS target
    USING #temp AS source
    ON (target.col1 = source.col1 AND target.col2 = source.col2) -- Remplacez "col1" et "col2" par les noms de vos colonnes
    WHEN MATCHED THEN
      UPDATE SET target.col3 = source.col3, target.col4 = source.col4 -- Remplacez "col3" et "col4" par les noms de vos colonnes
    WHEN NOT MATCHED THEN
      INSERT (col1, col2, col3, col4) -- Remplacez "col1", "col2", "col3" et "col4" par les noms de vos colonnes
      VALUES (source.col1, source.col2, source.col3, source.col4); -- Remplacez "col1", "col2", "col3" et "col4" par les noms de vos colonnes
  END TRY
  BEGIN CATCH
    INSERT INTO error_log (error_message, error_severity, error_state)
    VALUES (ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE());
  END CATCH;
END;



function ibanValide(iban) {
  iban = iban.replace(/\s/g, ''); // Supprimer les espaces éventuels dans le code IBAN
  if (iban.length != 28) {
    return false; // Un code IBAN doit comporter 28 caractères
  }
  if (/^[A-Z]{2}\d{2}[A-Za-z0-9]{20}$/.test(iban)) {
    let pays = iban.substr(0, 2).toUpperCase();
    let iban_num = iban.substr(4) + iban.substr(0, 4);
    iban_num = iban_num.split('').map(function(c) {
      return (isNaN(c) ? (c.charCodeAt(0) - 55).toString() : c);
    }).join('');
    return parseInt(iban_num) % 97 == 1;
  } else {
    return false;
  }
}
